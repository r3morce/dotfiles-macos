name: Validate Configuration Files

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        # Install tools for validation
        sudo apt-get update
        sudo apt-get install -y zsh lua5.4 luarocks
        sudo luarocks install luacheck
        
    - name: Validate Zsh configuration
      run: |
        echo "Validating zsh/.zshrc syntax..."
        if command -v zsh >/dev/null 2>&1; then
          zsh -n zsh/.zshrc
          echo "✅ zsh/.zshrc syntax is valid"
        else
          echo "⚠️  zsh not available, skipping .zshrc validation"
        fi
        
    - name: Validate Neovim configuration
      run: |
        echo "Validating Neovim Lua files..."
        # Check syntax of all Lua files
        lua_errors=0
        for file in $(find nvim -name "*.lua"); do
          if ! lua5.4 -c "$file" 2>/dev/null; then
            echo "⚠️  Lua file may have syntax issues: $file"
            lua_errors=1
          fi
        done
        
        if [ $lua_errors -eq 0 ]; then
          echo "✅ All Neovim Lua files have valid syntax"
        fi
        
        # Check for common Lua issues
        if command -v luacheck >/dev/null 2>&1; then
          luacheck nvim --no-unused-args --no-unused-locals || true
        fi
        echo "✅ Neovim configuration validated"
        
    - name: Validate WezTerm configuration
      run: |
        echo "Validating WezTerm configuration..."
        if command -v lua5.4 >/dev/null 2>&1; then
          lua5.4 -c wezterm/.config/wezterm/wezterm.lua 2>/dev/null && echo "✅ WezTerm configuration syntax is valid" || echo "⚠️  WezTerm configuration may have syntax issues"
        else
          echo "⚠️  lua5.4 not available, skipping WezTerm validation"
        fi
        
    - name: Check file structure
      run: |
        echo "Checking dotfiles structure..."
        
        # Check if required directories exist
        for dir in zsh nvim wezterm p10k; do
          if [ -d "$dir" ]; then
            echo "✅ $dir directory exists"
          else
            echo "❌ $dir directory missing"
            exit 1
          fi
        done
        
        # Check if key files exist
        key_files=(
          "zsh/.zshrc"
          "nvim/.config/nvim/init.lua"
          "wezterm/.config/wezterm/wezterm.lua"
          "p10k/.p10k.zsh"
        )
        
        for file in "${key_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done
        
        echo "✅ All required files present"
        
    - name: Validate symlink structure
      run: |
        echo "Checking symlink structure for GNU Stow..."
        
        # Check if directories have dotfiles (either at root or in subdirectories)
        for dir in zsh nvim wezterm p10k; do
          if [ -d "$dir" ]; then
            # Check if there are dotfiles at root level (which is fine for Stow)
            dot_files=$(find "$dir" -maxdepth 1 -name ".*" -type f)
            if [ -n "$dot_files" ]; then
              echo "✅ $dir has dotfiles at root level (Stow-compatible)"
            else
              # Check if there are dotfiles in subdirectories (also fine for Stow)
              subdir_dotfiles=$(find "$dir" -name ".*" -type f)
              if [ -n "$subdir_dotfiles" ]; then
                echo "✅ $dir has dotfiles in subdirectories (Stow-compatible)"
              else
                # For wezterm, also check for .lua files in .config subdirectories
                if [ "$dir" = "wezterm" ]; then
                  config_files=$(find "$dir" -name "*.lua" -type f)
                  if [ -n "$config_files" ]; then
                    echo "✅ $dir has configuration files in subdirectories (Stow-compatible)"
                  else
                    echo "⚠️  $dir has no configuration files found"
                  fi
                else
                  echo "⚠️  $dir has no dotfiles found"
                fi
              fi
            fi
          fi
        done
        
    - name: Check for common issues
      run: |
        echo "Checking for common configuration issues..."
        
        # Check for hardcoded paths (informational only)
        if grep -r "/Users/" . --exclude-dir=.git --exclude-dir=.github; then
          echo "ℹ️  Found hardcoded user paths. Consider using \$HOME or ~ instead for better portability."
        fi
        
        echo "✅ Configuration validation complete"
